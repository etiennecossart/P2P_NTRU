// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/perlin-network/noise/crypto (interfaces: HashPolicy)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHashPolicy is a mock of HashPolicy interface
type MockHashPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockHashPolicyMockRecorder
}

// MockHashPolicyMockRecorder is the mock recorder for MockHashPolicy
type MockHashPolicyMockRecorder struct {
	mock *MockHashPolicy
}

// NewMockHashPolicy creates a new mock instance
func NewMockHashPolicy(ctrl *gomock.Controller) *MockHashPolicy {
	mock := &MockHashPolicy{ctrl: ctrl}
	mock.recorder = &MockHashPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHashPolicy) EXPECT() *MockHashPolicyMockRecorder {
	return m.recorder
}

// HashBytes mocks base method
func (m *MockHashPolicy) HashBytes(arg0 []byte) []byte {
	ret := m.ctrl.Call(m, "HashBytes", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// HashBytes indicates an expected call of HashBytes
func (mr *MockHashPolicyMockRecorder) HashBytes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashBytes", reflect.TypeOf((*MockHashPolicy)(nil).HashBytes), arg0)
}
